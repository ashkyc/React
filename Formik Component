import React from 'react';
import {Formik, Field, Form, FieldArray, ErrorMessage} from 'formik';
import * as Yup from 'yup';

const initialValues ={
    regData: {
        firstName: "",
        lastName: "",
        email: "",
        password: "",
        isConfirm: "",
        userName: ""
    }
};

const RegisterForm = () =>(
    <div>
        
        <Formik 
        initialValues={initialValues}
        validationSchema={Yup.object({
            firstName: Yup.string().required('Required!'),
            lastName: Yup.string().required('Required!'),
            email: Yup.string().email('Invalid email!').required('Required!'),
            password: Yup.string().required("This value is required.")
                                    .min(8, "Password must be at least 8 characters")
                                    .matches(
                                      /^(?=.*[a-z]).{8,}$/,
                                      "Password must contain at least One lowercase character"
                                    )
                                    .matches(
                                      /^(?=.*[A-Z]).{8,}$/,
                                      "Password must contain at least One uppercase character"
                                    )
                                    .matches(
                                      /^(?=.*\d).{8,}$/,
                                      "Password must contain at least One number digit"
                                    )
                                    .matches(
                                      /^(?=.*[!@#$%^&*_-]).{8,}$/,
                                      "Password must contain at least One special character"
                                    ),
            isConfirm: Yup.string().oneOf([Yup.ref("password")], "Passwords do not match!").required('Required!')

        })}
        onSubmit={values =>{
            setTimeout(() =>{
                alert(JSON.stringify(values, null, 5));

            }, 500)
        }}
        >
        {({ errors, touched, isSubmitting})=> 
        <Form>
            <h1>New User Registration Form</h1>
            <div className="row">
                <div className="col-md-6 mb-2">
                    <label htmlFor="firstName">First name</label>
                    <Field name="firstName" type="text">
                        <input {...field} type="text" className="form-control form-control-sm" placeholder="First Name" />
                    </Field>
                    {errors.name && touched.name? (<div>{errors.name}</div>): null}
                    <ErrorMessage name="firstName">
                            {msg => <div className="field-error">{msg}</div>}
                    </ErrorMessage>
                    <div className="valid-feedback">Looks good!</div>
                    <div className="invalid-feedback">Please enter a valid first name</div>
              </div>
                <div className="col">
                    <Field name="lastName" type="text">
                    </Field>
                </div>
                <div className="col">
                    <Field name="email" type="email">
                    </Field>
                </div>
                <div className="col">
                    <Field name="password" type="password">
                    </Field>
                </div>
                <div className="col">
                    <Field name="isConfirm" type="password">
                    </Field>
                </div>
                <div className="col">
                    <button type="button" id="submitBtn" className="btn btn-primary">
                        Register
                    </button>
                    <button type="submit" disabled={isSubmitting} id="submitBtn" className="btn btn-primary">
                        Submit
                    </button>
                </div>
                </div>
            </Form>}
        </Formik>
    </div>
    
)

export default RegisterForm;
